openapi: 3.0.0
info:
  version: 1.0.0
  title: UShare
paths:
  "/status/{memberId}:":
    get:
      tags:
        - "メンバーステータス情報API"
      summary: "メンバーステータス情報取得API"
      description: "指定したIDのユーザのステータス情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      menuStatus:
                        type: "integer"
                      contractStatus:
                        type: "integer"
                      commissionStatus:
                        type: "integer"
                      guaranteeStatus:
                        type: "integer"
                      explanationStatus:
                        type: "integer"
                      signStatus:
                        type: "integer"
                      initialPaymentStatus:
                        type: "integer"
                      onbordingStatus:
                        type: "integer"
                      contractCompleted:
                        type: "integer"
                      evacuationRoute:
                        type: "integer"
                      roomStatus:
                        type: "integer"
                      houseRule:
                        type: "integer"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    menuStatus: 2
                    contractStatus: 1
                    commissionStatus: 1
                    guaranteeStatus: 1
                    explanationStatus: 1
                    signStatus: 1
                    initialPaymentStatus: 1
                    onbordingStatus: 1
                    contractCompleted: 1
                    evacuationRoute: 1
                    roomStatus: 1
                    houseRule: 1
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null
  "/status":
    post:
      tags:
        - "メンバーステータス情報API"
      summary: "メンバーステータス情報登録API"
      requestBody:
        description: "登録したいメンバーのステータス情報"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                statusClassId:
                  type: "integer"
                status:
                  type: "integer"
              example:
                userId: 2
                statusClassId: 2
                status: 1
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null
  "/statusCount?statusClassId={statusClassId}&status={status}":
    get:
      tags:
        - "メンバーステータス情報API"
      summary: "メンバーステータス件数取得API"
      description: "指定したステータス種別とステータスの件数を取得します。"
      parameters:
        - name: "statusClassId"
          in: "query"
          description: "取得したいステータス種別 複数指定する時は'-’で結合する"
          required: true
          type: "integer"
          format: "int64"
        - name: "status"
          in: "query"
          description: "取得したいステータス"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      statusCount:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            statusClassId:
                              type: "integer"
                            count:
                              type: "integer"
                example:
                  header:
                    resultCode: 200
                  data:
                    statusCount:
                    - {statusClassId: 1, count: 10 }
                    - {statusClassId: 2, count: 2 }
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/contract/search?statusClassId={statusClassId}&keyword={keyword}":
    get:
      tags:
        - "メンバー契約情報検索API"
      summary: "メンバー契約情報検索API"
      description: "指定したステータス種別と一致し、指定したキーワードが氏名に含まれるメンバー契約情報を検索する。"
      parameters:
        - name: "statusClassId"
          in: "query"
          description: "取得したいステータス種別"
          required: true
          type: "integer"
        - name: "keyword"
          in: "query"
          description: "取得したいメンバーの検索ワード"
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      incomplete:
                        type: array
                        items:
                          type: object
                          properties:
                            userId:
                              type: integer
                            fullName:
                              type: string
                            kana:
                              type: string
                      complete:
                        type: array
                        items:
                          type: object
                          properties:
                            userId:
                              type: integer
                            fullName:
                              type: string
                            kana:
                              type: string
                example:
                  header:
                    resultCode: 200
                  data:
                    incomplete:
                      - { userId: 1, fullName: "X", kana: "ｱ"}
                      - { userId: 2, fullName: "Y", kana: "ｲ" }
                      - { userId: 3, fullName: "Z", kana: "ｳ" }
                    complete:
                      - { userId: 4, fullName: "A", kana: "ｴ"  }
                      - { userId: 5, fullName: "B", kana: "ｵ" }
                      - { userId: 6, fullName: "C", kana: "ｶ"  }
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/contract/base/{memberId}:":
    get:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(1/4)"
      description: "指定したIDのユーザのメンバー契約情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      fullName:
                        type: "string"
                      kana:
                        type: "string"
                      gender:
                        type: "integer"
                      country:
                        type: "string"
                      birthday:
                        type: "string"
                      postalCode:
                        type: "string"
                      address:
                        type: "string"
                      phoneNumber:
                        type: "string"
                      schoolOrWorkplace:
                        type: "string"
                      workplaceAddress:
                        type: "string"
                      workplaceNumber:
                        type: "string"
                      emergencyFullName:
                        type: "string"
                      emergencyFullNamePron:
                        type: "string"
                      emergencyAddress:
                        type: "string"
                      emergencyRelationship:
                        type: "string"
                      emergencyEmail:
                        type: "string"
                      emergencyPhoneNumber:
                        type: "string"
                      snsType:
                        type: "integer"
                      snsId:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    fullName: "山田 太郎"
                    kana: "ヤマダ タロウ"
                    gender: 0
                    country: "JA"
                    birthday: "2001/01/01"
                    postalCode: "1638001"
                    address: "新宿区西新宿2-8-1"
                    phoneNumber: "03-5321-1111"
                    schoolOrWorkplace: "市役所"
                    workplaceAddress: "横浜市中区日本大通1"
                    workplaceNumber: "045-210-1111"
                    emergencyFullName: "山田 花子"
                    emergencyFullNamePron: "Yamada Hanako"
                    emergencyAddress: "札幌市中央区北3条西6丁目"
                    emergencyRelationship: "母"
                    emergencyEmail: "motherEmail@example.com"
                    emergencyPhoneNumber: "011-231-4111"
                    snsType: 0
                    snsId: "XYZ0123456"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報削除API(1/4)"
      description: "指定したIDのメンバー契約情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/contract/base":
    post:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報登録API(1/4)"
      requestBody:
        description: "登録したいメンバーの契約情報(1/4)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                fullName:
                  type: "string"
                kana:
                  type: "string"
                gender:
                  type: "integer"
                country:
                  type: "string"
                birthday:
                  type: "string"
                postalCode:
                  type: "string"
                address:
                  type: "string"
                phoneNumber:
                  type: "string"
                schoolOrWorkplace:
                  type: "string"
                workplaceAddress:
                  type: "string"
                workplaceNumber:
                  type: "string"
                emergencyFullName:
                  type: "string"
                emergencyFullNamePron:
                  type: "string"
                emergencyAddress:
                  type: "string"
                emergencyRelationship:
                  type: "string"
                emergencyEmail:
                  type: "string"
                emergencyPhoneNumber:
                  type: "string"
                snsType:
                  type: "integer"
                snsId:
                  type: "string"
              example:
                userId: 1
                fullName: "山田 太郎"
                kana: "ヤマダ タロウ"
                gender: 0
                country: "JA"
                birthday: "2001/01/01"
                postalCode: "1638001"
                address: "新宿区西新宿2-8-1"
                phoneNumber: "03-5321-1111"
                schoolOrWorkplace: "市役所"
                workplaceAddress: "横浜市中区日本大通1"
                workplaceNumber: "045-210-1111"
                emergencyFullName: "山田 花子"
                emergencyFullNamePron: "Yamada Hanako"
                emergencyAddress: "札幌市中央区北3条西6丁目"
                emergencyRelationship: "母"
                emergencyEmail: "motherEmail@example.com"
                emergencyPhoneNumber: "011-231-4111"
                snsType: 0
                snsId: "XYZ0123456"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/contract/date/{memberId}:":
    get:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(2/4)"
      description: "指定したIDのユーザの契約情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      beginDateContract:
                        type: "string"
                      endDateContract:
                        type: "string"
                      arrivalDate:
                        type: "string"
                      arrivalTime:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    beginDateContract: "2023/04/01"
                    endDateContract: "2025/03/31"
                    arrivalDate: "2023/03/31"
                    arrivalTime: "09:30"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報削除API(2/4)"
      description: "指定したIDのメンバー契約情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/contract/date":
    post:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報登録API(2/4)"
      requestBody:
        description: "登録したいメンバーの契約情報(2/4)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                beginDateContract:
                  type: "string"
                endDateContract:
                  type: "string"
                arrivalDate:
                  type: "string"
                arrivalTime:
                  type: "string"
              example:
                userId: 1
                beginDateContract: "2023/04/01"
                endDateContract: "2025/03/31"
                arrivalDate: "2023/03/31"
                arrivalTime: "09:30"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/contract/image/{memberId}:":
    get:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(3/4)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      idCardFrontImg:
                        type: string
                        format: byte
                      idCardBackImg:
                        type: string
                        format: byte
                      healthInsCardFrontImg:
                        type: string
                        format: byte
                      healthInsCardBackImg:
                        type: string
                        format: byte
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    idCardFrontImg: "(Base64StringData)"
                    idCardBackImg: "(Base64StringData)"
                    healthInsCardFrontImg: "(Base64StringData)"
                    healthInsCardBackImg: "(Base64StringData)"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報削除API(3/4)"
      description: "指定したIDのメンバー契約情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/contract/image":
    post:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報登録API(3/4)"
      requestBody:
        description: "登録したいメンバーの契約情報(3/4)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                idCardFrontImg:
                  type: string
                  format: byte
                idCardBackImg:
                  type: string
                  format: byte
                healthInsCardFrontImg:
                  type: string
                  format: byte
                healthInsCardBackImg:
                  type: string
                  format: byte
              example:
                userId: 1
                idCardFrontImg: "(Base64StringData)"
                idCardBackImg: "(Base64StringData)"
                healthInsCardFrontImg: "(Base64StringData)"
                healthInsCardBackImg: "(Base64StringData)"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/contract/questionnaire/{memberId}:":
    get:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(4/4)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      prefRoomType:
                        type: "integer"
                      sensitiveLevelToMessiness:
                        type: "integer"
                      sensitiveLevelToNoise:
                        type: "integer"
                      sensitiveLevelToTemperature:
                        type: "integer"
                      prefDietType:
                        type: "integer"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    prefRoomType: 2
                    sensitiveLevelToMessiness: 1
                    sensitiveLevelToNoise: 3
                    sensitiveLevelToTemperature: 5
                    prefDietType: 1
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報削除API(4/4)"
      description: "指定したIDのメンバー契約情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/contract/questionnaire":
    post:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報登録API(4/4)"
      requestBody:
        description: "登録したいメンバーの契約情報(4/4)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                prefRoomType:
                  type: "integer"
                sensitiveLevelToMessiness:
                  type: "integer"
                sensitiveLevelToNoise:
                  type: "integer"
                sensitiveLevelToTemperature:
                  type: "integer"
                prefDietType:
                  type: "integer"
              example:
                userId: 1
                prefRoomType: 2
                sensitiveLevelToMessiness: 1
                sensitiveLevelToNoise: 3
                sensitiveLevelToTemperature: 5
                prefDietType: 1
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/memberinfo/search?keyword={keyword}":
    get:
      tags:
        - "メンバー情報検索API"
      summary: "メンバー情報検索API"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "keyword"
          in: "query"
          description: "取得したいメンバーの検索ワード"
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      memberList:
                        type: array
                        items:
                          type: "object"
                          properties:
                            userId:
                              type: "integer"
                            fullName:
                              type: "string"
                            kana:
                              type: "string"
                            university:
                              type: "string"
                            birthday:
                              type: "string"
                            major:
                              type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    memberList:
                      - {
                          userId: 1,
                          fullName: "X",
                          kana: "ｱ",
                          university: "X Univ",
                          birthday: "YYYY/MM/DD",
                          major: "X major",
                        }
                      - {
                          userId: 2,
                          fullName: "Y",
                          kana: "ｲ",
                          university: "Y Univ",
                          birthday: "YYYY/MM/DD",
                          major: "X major",
                        }
                      - {
                          userId: 3,
                          fullName: "Z",
                          kana: "ｳ",
                          university: "Z Univ",
                          birthday: "YYYY/MM/DD",
                          major: "X major",
                        }
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/base/{memberId}:":
    get:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報取得API(1/5)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      fullName:
                        type: "string"
                      kana:
                        type: "string"
                      birthday:
                        type: "string"
                      university:
                        type: "string"
                      major:
                        type: "string"
                      location:
                        type: "string"
                      homeTown:
                        type: "string"
                      livingPeriodStart:
                        type: "string"
                      livingPeriodEnd:
                        type: "string"
                      link1:
                        type: "string"
                      link2:
                        type: "string"
                      link3:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    fullName: "Yamada Taro"
                    kana: "ﾔﾏﾀﾞ ﾀﾛｳ"
                    birthday: "2001/04/01"
                    university: "Waseda University"
                    major: "Architecture"
                    location: "U Share Nishiwaseda"
                    homeTown: "Osaka"
                    livingPeriodStart: "2023/01/01"
                    livingPeriodEnd: "2024/12/31"
                    link1: "(InstagramURL)"
                    link2: "(FacebookURL)"
                    link3: "(LinkedInURL)"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報削除API(1/5)"
      description: "指定したIDのメンバー情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/base":
    post:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報登録API(1/5)"
      requestBody:
        description: "登録したいメンバーの情報(1/5)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                fullName:
                  type: "string"
                kana:
                  type: "string"
                birthday:
                  type: "string"
                university:
                  type: "string"
                major:
                  type: "string"
                location:
                  type: "string"
                homeTown:
                  type: "string"
                livingPeriodStart:
                  type: "string"
                livingPeriodEnd:
                  type: "string"
                link1:
                  type: "string"
                link2:
                  type: "string"
                link3:
                  type: "string"
              example:
                userId: 1
                fullName: "Yamada Taro"
                kana: "ﾔﾏﾀﾞ ﾀﾛｳ"
                birthday: "2001/04/01"
                university: "Waseda University"
                major: "Architecture"
                location: "U Share Nishiwaseda"
                homeTown: "Osaka"
                livingPeriodStart: "2023/01/01"
                livingPeriodEnd: "2024/12/31"
                link1: "(InstagramURL)"
                link2: "(FacebookURL)"
                link3: "(LinkedInURL)"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/memberinfo/hobby/{memberId}:":
    get:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報取得API(2/5)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      hobby:
                        type: array
                        items:
                          type: string
                      placesYouLived:
                        type: array
                        items:
                          type: string
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    hobby:
                      - tennis
                      - fishing
                      - camp
                    placesYouLived:
                      - NewYork
                      - Pari
                      - Venetia
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報削除API"
      description: "指定したIDのメンバー情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/hobby":
    post:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報登録API(2/5)"
      requestBody:
        description: "登録したいメンバーの情報(2/5)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                hobby:
                  type: array
                  items:
                    type: string
                placesYouLived:
                  type: array
                  items:
                    type: string
              example:
                userId: 1
                hobby:
                  - tennis
                  - fishing
                  - camp
                placesYouLived:
                  - NewYork
                  - Pari
                  - Venetia
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/memberinfo/professional/{memberId}:":
    get:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報取得API(3/5)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      companyName:
                        type: "string"
                      employmentType:
                        type: "string"
                      position:
                        type: "string"
                      startDate:
                        type: "string"
                      endDate:
                        type: "string"
                      industry:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    companyName: "株式会社XXX"
                    employmentType: "Permanent Employee"
                    position: "CEO"
                    startDate: "2022/01/01"
                    endDate: "2023/12/31"
                    industry: "IT"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報削除API"
      description: "指定したIDのメンバー情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/professional":
    post:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報登録API(3/5)"
      requestBody:
        description: "登録したいメンバーの情報(3/5)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                companyName:
                  type: "string"
                employmentType:
                  type: "string"
                position:
                  type: "string"
                startDate:
                  type: "string"
                endDate:
                  type: "string"
                industry:
                  type: "string"
              example:
                userId: 1
                companyName: "株式会社XXX"
                employmentType: "Permanent Employee"
                position: "CEO"
                startDate: "2022/01/01"
                endDate: "2023/12/31"
                industry: "IT"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/memberinfo/skills/{memberId}:":
    get:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報取得API(4/5)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      roleDesc:
                        type: "string"
                      skills:
                        type: array
                        items:
                          type: string
                      wannaConnectWith:
                        type: array
                        items:
                          type: string
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    roleDesc: "Manager"
                    skills:
                      - technology
                      - economics
                      - finance
                    wannaConnectWith:
                      - interestedin1
                      - interestedin2
                      - interestedin3
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報削除API"
      description: "指定したIDのメンバー情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/skills":
    post:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報登録API(4/5)"
      requestBody:
        description: "登録したいメンバーの情報(4/5)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                roleDesc:
                  type: "string"
                skills:
                  type: "array"
                  items:
                    type: "string"
                wannaConnectWith:
                  type: "array"
                  items:
                    type: "string"
              example:
                userId: 1
                roleDesc: "Manager"
                skills:
                  - technology
                  - economics
                  - finance
                wannaConnectWith:
                  - interestedin1
                  - interestedin2
                  - interestedin3
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/memberinfo/selfintro/{memberId}:":
    get:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報取得API(5/5)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      selfIntro:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    selfIntro: "selfIntroXXX150char"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報削除API"
      description: "指定したIDのメンバー情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/selfintro":
    post:
      tags:
        - "メンバー情報API"
      summary: "メンバー情報登録API(5/5)"
      requestBody:
        description: "登録したいメンバーの情報(5/5)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                selfIntro:
                  type: "string"
              example:
                userId: 1
                role: "Manager"
                skills:
                  - technology
                  - economics
                  - finance
                wannaConnectWith:
                  - interestedin1
                  - interestedin2
                  - interestedin3
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/member/icon/{memberId}:":
    get:
      operationId: "sample_icon"
      tags:
        - "メンバー情報アイコンAPI"
      summary: "メンバー情報アイコン取得API"
      description: "指定したIDのユーザのメンバー情報アイコンを取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: アイコン画像ファイルをBASE64でダウンロードするエンドポイント
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      icon:
                        type: "string"
                        format: "byte"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    icon: "(Base64StringData)"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー情報アイコンAPI"
      summary: "メンバー情報アイコン削除API"
      description: "指定したIDのメンバー情報アイコン情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/member/icon":
    post:
      tags:
        - "メンバー情報アイコンAPI"
      summary: "メンバー情報アイコン登録API"
      requestBody:
        description: "指定したIDのメンバー情報アイコン情報を登録します。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                icon:
                  type: "integer"
                  format: "int64"
              example:
                userId: 1
                icon: "(Base64StringData)"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/member/cv/{memberId}:":
    get:
      operationId: "sample_pdf"
      tags:
        - "メンバー情報PDFAPI"
      summary: "メンバー情報PDF取得API"
      description: "指定したIDのユーザのメンバー情報PDFを取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: pdfファイルをBASE64でダウンロードするエンドポイント
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      cv:
                        type: "string"
                        format: "byte"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    cv: "(Base64StringData)"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー情報PDFAPI"
      summary: "メンバー情報PDFAPI"
      description: "指定したIDのメンバー情報PDF情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/member/cv":
    post:
      tags:
        - "メンバー情報PDFAPI"
      summary: "メンバー情報PDF登録API"
      requestBody:
        description: "指定したIDのメンバー情報PDF情報を登録します。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                cv:
                  type: "string"
                  format: "byte"
              example:
                userId: 1
                cv: "(Base64StringData)"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/member/movie/{memberId}:":
    get:
      operationId: "sample_movie"
      tags:
        - "メンバー情報動画API"
      summary: "メンバー情報動画取得API"
      description: "指定したIDのユーザのメンバー情報動画を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: mp4ファイルをBASE64でダウンロードするエンドポイント
          content:
            application/json:
              schema:
                type: string
                format: byte
              example:
                header:
                  resultCode: 200
                data:
                  userId: 1
                  movie: "(Base64StringData)"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "メンバー情報動画API"
      summary: "メンバー情報動画API"
      description: "指定したIDのメンバー情報動画情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/member/movie":
    post:
      tags:
        - "メンバー情報動画API"
      summary: "メンバー情報動画登録API"
      requestBody:
        description: "指定したIDのメンバー情報動画情報を登録します。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                movie:
                  type: "integer"
                  format: "int64"
              example:
                userId: 1
                movie: "(Base64StringData)"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/login":
    post:
      tags:
        - "ログイン情報取得API"
      summary: "ログイン情報取得API"
      requestBody:
        description: "指定したIDのユーザを検索・パスワードチェックし、ログイン情報を取得します。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                mail:
                  type: "string"
                password:
                  type: "string"
              example:
                mail: 1@exampole.com
                password: xxxxxxxx
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      role:
                        type: "string"
                      password:
                        type: "string"
                      passReset:
                        type: "integer"
                      token:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    role: "usr"
                    password: "XXXXXXXXXXXXXXXXXX"
                    passReset: 0
                    token: "XXXXXXXXXXXXX.XXXXXXXXXXXX.XXXXXXXXXX"
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/password/reset":
    post:
      tags:
        - "パスワード情報API"
      summary: "パスワードリセットAPI"
      requestBody:
        description: "指定したmailのユーザのパスワードをリセットします。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                mail:
                  type: "string"
              example:
                mail: 1@exampole.com
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/password/change":
    post:
      tags:
        - "パスワード情報API"
      summary: "パスワード変更API"
      requestBody:
        description: "指定したIDのユーザのパスワードを変更します。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                password:
                  type: "string"
                newPassword:
                  type: "string"
              example:
                userId: 1
                password: xxxxxxxx
                newPassword: yyyyyyyy
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      role:
                        type: "string"
                      password:
                        type: "string"
                      passReset:
                        type: "integer"
                      token:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    role: "usr"
                    password: "XXXXXXXXXXXXXXXXXX"
                    passReset: 0
                    token: "XXXXXXXXXXXXX.XXXXXXXXXXXX.XXXXXXXXXX"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null
                  
  "/signup":
    post:
      tags:
        - "ユーザー新規登録API"
      summary: "ユーザー新規登録API"
      requestBody:
        description: "新規にユーザーを登録します。status=0：契約画面、status=1：コミュニティ画面"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                mail:
                  type: "string"
                password:
                  type: "string"
                role:
                  type: "string"
                language:
                  type: "string"
                status:
                  type: "integer"
              example:
                mail: "test@test.com"
                password: "XXXXXX"
                role: "usr"
                language: "jp"
                status: 1
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/user/{memberId}:":
    delete:
      tags:
        - "ユーザー削除API"
      summary: "ユーザー削除API"
      description: "指定したIDのユーザーを削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

                  
  "/evacuation/{userId}:":
    get:
      tags:
        - "オンボーディングAPI"
      summary: "避難経路取得API"
      description: "指定したIDのユーザの避難経路を取得します。"
      parameters:
        - name: "userId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      image:
                        type: "string"
                        format: "byte"
                      explanations:
                        type: "array"
                        items:
                          type: "string"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    image: (Base64StringData)
                    explanations: 
                      - 停電時にエレベーターが止まってしまう場合があります。階段ないしは、バルコニーの梯子をご利用ください。
                      - 指定避難場所は、富山公園と早稲田大学のキャンパスです。
                      - 詳細情報は、新宿区のホームページをご確認ください。
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/roomRestoration/{userId}:":
    get:
      tags:
        - "オンボーディングAPI"
      summary: "お部屋現状取得API"
      description: "指定したIDのユーザのお部屋現状を取得します。"
      parameters:
        - name: "userId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      wall:
                        type: "array"
                        items:
                            type: "string"
                            format: "byte"
                      ceiling:
                        type: "array"
                        items:
                            type: "string"
                            format: "byte"
                      floor:
                        type: "array"
                        items:
                            type: "string"
                            format: "byte"
                      balcony:
                        type: "array"
                        items:
                            type: "string"
                            format: "byte"
                      doorLock:
                        type: "array"
                        items:
                            type: "string"
                            format: "byte"
                      shelf:
                        type: "array"
                        items:
                            type: "string"
                            format: "byte"
                      deskAndChair:
                        type: "array"
                        items:
                            type: "string"
                            format: "byte"
                      proof:
                        type: "array"
                        items:
                            type: "string"
                            format: "byte"
                      bedding:
                        type: "array"
                        items:
                            type: "string"
                            format: "byte"
                      mailbox:
                        type: "array"
                        items:
                            type: "string"
                            format: "byte"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    wall:
                      - (Base64StringData)
                    ceiling: 
                      - (Base64StringData)
                      - (Base64StringData)
                    floor: null
                    balcony: null
                    doorLock: null
                    shelf: null
                    deskAndChair:
                      - (Base64StringData)
                    proof: null
                    bedding: null
                    mailbox: null

        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "オンボーディングAPI"
      summary: "お部屋現状削除API"
      description: "指定したIDのお部屋現状を削除します。"
      parameters:
        - name: "userId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/roomRestoration":
    post:
      tags:
        - "オンボーディングAPI"
      summary: "お部屋現状登録API"
      requestBody:
        description: "指定したIDのお部屋現状を登録します。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                wall:
                  type: "array"
                  items:
                      type: "string"
                      format: "byte"
                ceiling:
                  type: "array"
                  items:
                      type: "string"
                      format: "byte"
                floor:
                  type: "array"
                  items:
                      type: "string"
                      format: "byte"
                balcony:
                  type: "array"
                  items:
                      type: "string"
                      format: "byte"
                doorLock:
                  type: "array"
                  items:
                      type: "string"
                      format: "byte"
                shelf:
                  type: "array"
                  items:
                      type: "string"
                      format: "byte"
                deskAndChair:
                  type: "array"
                  items:
                      type: "string"
                      format: "byte"
                proof:
                  type: "array"
                  items:
                      type: "string"
                      format: "byte"
                bedding:
                  type: "array"
                  items:
                      type: "string"
                      format: "byte"
                mailbox:
                  type: "array"
                  items:
                      type: "string"
                      format: "byte"
              example:
                userId: 1
                wall:
                  - (Base64StringData)
                ceiling: 
                  - (Base64StringData)
                  - (Base64StringData)
                floor: null
                balcony: null
                doorLock: null
                shelf: null
                deskAndChair:
                  - (Base64StringData)
                proof: null
                bedding: null
                mailbox: null
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/news":
    get:
      tags:
        - "お知らせ情報API"
      summary: "お知らせ情報一覧取得API"
      description: "お知らせ情報一覧を取得します。"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      newsList:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            newsId:
                              type: "integer"
                            subject:
                              type: "string"
                            creationDateTime:
                              type: "string"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    newsList: 
                    - {newsId: 5, subject: "お知らせ５", creationDateTime: "2023/04/05"}
                    - {newsId: 3, subject: "お知らせ３", creationDateTime: "2023/04/03"}
                    - {newsId: 2, subject: "お知らせ２", creationDateTime: "2023/04/02"}
                    - {newsId: 1, subject: "お知らせ１", creationDateTime: "2023/04/01"}
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null
  "/news/{newsId}:":
    get:
      tags:
        - "お知らせ情報API"
      summary: "お知らせ情報取得API"
      description: "指定したIDのお知らせ情報を取得します。"
      parameters:
        - name: "newsId"
          in: "path"
          description: "取得したいお知らせ情報のID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      newsId:
                        type: "integer"
                      subject:
                        type: "string"
                      body:
                        type: "string"
                      creationDateTime:
                        type: "string"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                      newsId: 1
                      subject: "お知らせ５"
                      body: "お知らせの詳細"
                      creationDateTime: "2023/04/05"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null
    delete:
      tags:
        - "お知らせ情報API"
      summary: "お知らせ情報削除API"
      description: "指定したIDのお知らせ情報を削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "削除したいお知らせ情報のID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/faq/answer":
    get:
      tags:
        - "FAQ情報API"
      summary: "FAQ情報回答済み一覧取得API"
      description: "FAQ情報回答済み一覧を取得します。"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      faqList:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            faqId:
                              type: "integer"
                            question:
                              type: "string"
                            answerDateTime:
                              type: "string"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    faqList: 
                    - {faqId: 5, question: "質問５", answerDateTime: "2023/04/05"}
                    - {faqId: 3, question: "質問３", answerDateTime: "2023/04/03"}
                    - {faqId: 2, question: "質問２", answerDateTime: "2023/04/02"}
                    - {faqId: 1, question: "質問１", answerDateTime: "2023/04/01"}
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/faq/question":
    get:
      tags:
        - "FAQ情報API"
      summary: "FAQ情報未回答一覧取得API"
      description: "FAQ情報未回答一覧を取得します。"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      faqList:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            faqId:
                              type: "integer"
                            question:
                              type: "string"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    faqList: 
                    - {faqId: 5, question: "質問５"}
                    - {faqId: 3, question: "質問３"}
                    - {faqId: 2, question: "質問２"}
                    - {faqId: 1, question: "質問１"}
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/faq/detail/{faqId}:":
    get:
      tags:
        - "FAQ情報API"
      summary: "FAQ情報取得API"
      description: "指定したIDのFAQ情報を取得します。"
      parameters:
        - name: "faqId"
          in: "path"
          description: "取得したいFAQ情報のID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      faqId:
                        type: "integer"
                      question:
                        type: "string"
                      answer:
                        type: "string"
                      answerDateTime:
                        type: "string"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                      faqId: 1
                      question: "質問５"
                      answer: "回答"
                      answerDateTime: "2023/04/05"
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null
    delete:
      tags:
        - "FAQ情報API"
      summary: "FAQ情報削除API"
      description: "指定したIDのFAQ情報を削除します。"
      parameters:
        - name: "faqId"
          in: "path"
          description: "削除したいFAQ情報のID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/guaranteeExamination/{userId}:":
    get:
      tags:
        - "保証審査データAPI"
      summary: "保証審査データ取得API"
      description: "指定したIDのユーザの保証審査データを取得します。"
      parameters:
        - name: "userId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "string"
                      guaranteeData:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            contentsType:
                              type: "integer"
                            contentsClass:
                              type: "integer"
                            contentsData:
                              type: "string"
                              format: "byte"
                            registrationDateTime:
                              type: "string"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    guaranteeData: 
                      - {contentsType: 1, contentsClass: 1, contentsData: (Base64StringData), registrationDateTime: "2023/04/01 12:13:14"}
                      - {contentsType: 2, contentsClass: 2, contentsData: (Base64StringData), registrationDateTime: "2023/04/01 12:13:14"}
                    

        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "保証審査データAPI"
      summary: "保証審査データ削除API"
      description: "指定したIDの保証審査データを削除します。"
      parameters:
        - name: "userId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/guaranteeExamination":
    post:
      tags:
        - "保証審査データAPI"
      summary: "保証審査データ登録API"
      requestBody:
        description: "指定したIDの保証審査データを登録します。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                guaranteeData:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      contentsType:
                        type: "integer"
                      contentsClass:
                        type: "integer"
                      contentsData:
                        type: "string"
                        format: "byte"
              example:
                userId: 1
                guaranteeData: 
                  - {contentsType: 1, contentsClass: 1, contentsData: (Base64StringData)}
                  - {contentsType: 2, contentsClass: 2, contentsData: (Base64StringData)}
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/addGuaranteeExamination/{userId}:":
    get:
      tags:
        - "保証審査データ追加依頼API"
      summary: "保証審査データ追加依頼取得API"
      description: "指定したIDのユーザの保証審査データ追加依頼を取得します。"
      parameters:
        - name: "userId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "string"
                      requiredFiles:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            contentsClass:
                              type: "integer"
                            contentsCount:
                              type: "integer"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    requiredFiles: 
                      - {contentsClass: 1, contentsCount: 1}
                      - {contentsClass: 2, contentsCount: 2}
                    

        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    delete:
      tags:
        - "保証審査データ追加依頼API"
      summary: "保証審査データ追加依頼削除API"
      description: "指定したIDの保証審査データ追加依頼を削除します。"
      parameters:
        - name: "userId"
          in: "path"
          description: "削除したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/addGuaranteeExamination":
    post:
      tags:
        - "保証審査データ追加依頼API"
      summary: "保証審査データ追加依頼登録API"
      requestBody:
        description: "指定したIDの保証審査データ追加依頼を登録します。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                requiredFiles:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      contentsClass:
                        type: "integer"
                      contentsCount:
                        type: "integer"
              example:
                userId: 1
                requiredFiles: 
                  - {contentsClass: 1, contentsCount: 1}
                  - {contentsClass: 2, contentsCount: 2}
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/stripe/payContractCommission/{userId}:":
    get:
      tags:
        - "決済API"
      summary: "契約手数料決済API"
      description: "指定したIDのユーザの契約手数料決済画面へのURLを取得します。"
      parameters:
        - name: "userId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      redirectUrl:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    redirectUrl: "https://xxx.xxx.xxx"
        400:
          description: "BadRequest"

  "/stripe/payInitialCost/{userId}:":
    get:
      tags:
        - "決済API"
      summary: "初期費用決済API"
      description: "指定したIDのユーザの初期費用決済画面へのURLを取得します。"
      parameters:
        - name: "userId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      redirectUrl:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    redirectUrl: "https://xxx.xxx.xxx"
        400:
          description: "BadRequest"

  "/building":
    get:
      tags:
        - "建物情報API"
      summary: "建物情報一覧取得API"
      description: "建物情報の一覧を取得します。"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      building:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            buildingId:
                              type: "integer"
                            buildingName:
                              type: "string"
                            evacuationRouteImage:
                              type: "string"
                            evacuationExplanations:
                              type: "array"
                              items:
                                type: "object"
                                properties:
                                  type: "string"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    building: 
                    - {buildingId: 1, buildingName: "建物１", evacuationRouteImage: (Base64StringData), evacuationExplanations: ["説明１","説明２","説明３"]}
                    - {buildingId: 2, buildingName: "建物１", evacuationRouteImage: (Base64StringData), evacuationExplanations: ["説明１","説明２","説明３"]}
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    post:
      tags:
        - "建物情報API"
      summary: "建物情報登録API"
      requestBody:
        description: "指定したIDの建物情報を登録します。ID=nullを指定で新規登録"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                buildingId:
                  type: "integer"
                buildingName:
                  type: "string"
                evacuationRouteImage:
                  type: "integer"
                  format: "byte"
                evacuationExplanations:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      type: "string"
              example:
                buildingId: 1
                buildingName: "建物１"
                evacuationRouteImage: (Base64StringData)
                evacuationExplanations: 
                  - "説明１"
                  - "説明２"
                  - "説明３"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/building/{buildingId}:":
    get:
      tags:
        - "建物情報API"
      summary: "建物情報取得API"
      description: "指定したIDの建物情報を取得します。"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      buildingId:
                        type: "integer"
                      buildingName:
                        type: "string"
                      evacuationRouteImage:
                        type: "string"
                      evacuationExplanations:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            type: "string"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    buildingId: 1
                    buildingName: "建物１"
                    evacuationRouteImage: (Base64StringData)
                    evacuationExplanations: ["説明１","説明２","説明３"]
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/room":
    get:
      tags:
        - "部屋情報API"
      summary: "部屋情報一覧取得API"
      description: "部屋情報の一覧を取得します。"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      building:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            roomId:
                              type: "integer"
                            buildingId:
                              type: "integer"
                            roomNumber:
                              type: "string"
                            price:
                              type: "integer"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    properties:
                      - { roomId: 1, buildingId: 1, roomNumber: "101", price: 120000 }
                      - { roomId: 2, buildingId: 1, roomNumber: "102", price: 120000 }
                      - { roomId: 3, buildingId: 2, roomNumber: "101", price: 120000 }
                      - { roomId: 4, buildingId: 2, roomNumber: "102", price: 120000 }
                   
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

    post:
      tags:
        - "部屋情報API"
      summary: "部屋情報登録API"
      requestBody:
        description: "指定したIDの部屋情報を登録します。ID=nullを指定で新規登録"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                roomId:
                  type: "integer"
                buildingId:
                  type: "integer"
                roomNumber:
                  type: "string"
                price:
                  type: "integer"
              example:
                roomId: 1
                buildingId: 1
                roomNumber: "103"
                price: 120000
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/room/{roomId}:":
    get:
      tags:
        - "部屋情報API"
      summary: "部屋情報取得API"
      description: "指定したIDの部屋情報を取得します。"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      roomId:
                        type: "integer"
                      buildingId:
                        type: "integer"
                      roomNumber:
                        type: "string"
                      price:
                        type: "integer"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    roomId: 1
                    buildingId: 1
                    roomNumber: "101"
                    price: 120000 
                   
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/roomAssignment/{userId}:":
    get:
      tags:
        - "部屋割当情報API"
      summary: "部屋割当情報取得API"
      description: "指定したIDの部屋割当情報を取得します。"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      userId:
                        type: "integer"
                      buildingId:
                        type: "integer"
                      buildingName:
                        type: "string"
                      roomId:
                        type: "integer"
                      roomNumber:
                        type: "string"
                        
                example:
                  header:
                    resultCode: 200
                  data:
                    userId: 1
                    buildingId: 1
                    buildingName: "建物１"
                    roomId: 1
                    roomNumber: "101"
                   
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/roomAssignment":
    post:
      tags:
        - "部屋割当情報API"
      summary: "部屋割当情報登録API"
      requestBody:
        description: "指定したIDの部屋割当情報を登録します。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                buildingId:
                  type: "integer"
                roomId:
                  type: "integer"
              example:
                userId: 1
                buildingId: 1
                roomId: 1
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/fcmToken":
    post:
      tags:
        - "FCM Token 登録API"
      summary: "FCM Token 登録API"
      requestBody:
        description: "指定したuserIdのFCM Tokenを登録する"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "integer"
                fcmToken:
                  type: "string"
              example:
                userId: 1
                fcmToken: "Firebase Cloud Message Token"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/fcmToken/{fcmToken}:":
    delete:
      tags:
        - "FCM Token 削除API"
      summary: "FCM Token 削除API"
      description: "指定したuserIdのFCM Tokenを削除する"
      parameters:
        - name: "fcmToken"
          in: "path"
          description: "削除したいFCMのToken"
          required: true
          type: "string"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          description: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "integer"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

