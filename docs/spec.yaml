openapi: 3.0.0
info:
  version: 1.0.0
  title: UShare
paths:
  "/memberinfo1/{memberId}:":
    get:
      tags:
        - "メンバー情報取得API"
      summary:
        "メンバー情報取得API(1/5)"
      description:
        "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "int"
                  fullName:
                    type: "string"
                  birthday:
                    type: "string"
                  university:
                    type: "string"
                  major:
                    type: "string"
                  livingPeriodStart:
                    type: "string"
                  livingPeriodEnd:
                    type: "string"
                  link1:
                    type: "string"
                  link2:
                    type: "string"
                  link3:
                    type: "string"
                example:
                  id: "1"
                  fullName: "Yamada Taro"
                  birthday: "04/01"
                  university: "Waseda University"
                  major: "Architecture"
                  location: "U Share Nishiwaseda"
                  livingPeriodStart: "2023/01/01"
                  livingPeriodEnd: "2024/12/31"
                  link1: "(InstagramURL)"
                  link2: "(FacebookURL)"
                  link3: "(LinkedInURL)"
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "BAD_REQUEST"
                  message:
                    type: "string"
                    example: "BAD_REQUEST"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "NOT_FOUND"
                  message:
                    type: "string"
                    example: "NOT_FOUND"

  "/memberinfo2/{memberId}:":
    get:
      tags:
        - "メンバー情報取得API"
      summary:
        "メンバー情報取得API(2/5)"
      description:
        "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "int"
                  hobby:
                    type: array
                    items:
                      type: string
                  places_you_lived:
                    type: array
                    items:
                      type: string
                example:
                  id: "1"
                  hobby:
                    - tennis
                    - fishing
                    - camp
                  places_you_lived:
                    - NewYork
                    - Pari
                    - Venetia
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "BAD_REQUEST"
                  message:
                    type: "string"
                    example: "BAD_REQUEST"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "NOT_FOUND"
                  message:
                    type: "string"
                    example: "NOT_FOUND"

  "/memberinfo3/{memberId}:":
    get:
      tags:
        - "メンバー情報取得API"
      summary:
        "メンバー情報取得API(3/5)"
      description:
        "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "int"
                  companyName:
                    type: "string"
                  employmentType:
                    type: "string"
                  position:
                    type: "string"
                  startDate:
                    type: "string"
                  endDate:
                    type: "string"
                  industry:
                    type: "string"
                example:
                  id: "1"
                  companyName: "株式会社XXX"
                  employmentType: "Permanent Employee"
                  position: "CEO"
                  startDate: "2022/01/01"
                  endDate: "2023/12/31"
                  industry: "IT"
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "BAD_REQUEST"
                  message:
                    type: "string"
                    example: "BAD_REQUEST"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "NOT_FOUND"
                  message:
                    type: "string"
                    example: "NOT_FOUND"

  "/memberinfo4/{memberId}:":
    get:
      tags:
        - "メンバー情報取得API"
      summary:
        "メンバー情報取得API(4/5)"
      description:
        "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "int"
                  role:
                    type: "string"
                  skills:
                    type: array
                    items:
                      type: string
                  WannaConnectWith:
                    type: array
                    items:
                      type: string
                example:
                  id: "1"
                  role: "Manager"
                  skills:
                    - technology
                    - economics
                    - finance
                  WannaConnectWith:
                    - interestedin1
                    - interestedin2
                    - interestedin3
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "BAD_REQUEST"
                  message:
                    type: "string"
                    example: "BAD_REQUEST"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "NOT_FOUND"
                  message:
                    type: "string"
                    example: "NOT_FOUND"

  "/memberinfo5/{memberId}:":
    get:
      tags:
        - "メンバー情報取得API"
      summary:
        "メンバー情報取得API(5/5)"
      description:
        "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "int"
                  selfIntro:
                    type: "string"
                example:
                  id: "1"
                  selfIntro: "selfIntroXXX150char"
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "BAD_REQUEST"
                  message:
                    type: "string"
                    example: "BAD_REQUEST"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "NOT_FOUND"
                  message:
                    type: "string"
                    example: "NOT_FOUND"

  "member/cv/{memberId}:":
    get:
      operationId: 'sample_pdf'
      tags:
        - "メンバー情報PDF取得API"
      summary:
        "メンバー情報PDF取得API"
      description:
        "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: pdfファイルでダウンロードするエンドポイント
          content:
            application/pdf:
              schema:
                type: string
                format: binary

  "member/movie/{memberId}:":
    get:
      operationId: 'sample_movie'
      tags:
        - "メンバー情報動画取得API"
      summary:
        "メンバー情報動画取得API"
      description:
        "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: mp4ファイルでダウンロードするエンドポイント
          content:
            video/mp4:
              schema:
                type: string
                format: binary

  "/pass":
    post:
      tags:
        - "ログイン情報取得API"
      summary:
        "ログイン情報取得API"
      description:
        "指定したIDのユーザを検索・パスワードチェックし、ログイン情報を取得します。"
      parameters:
        - name: "email"
          in: "formData"
          description: "ユーザのメールアドレス"
          required: true
          type: "string"
        - name: "pass"
          in: "formData"
          description: "ユーザのパスワード"
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  no:
                    type: "int"
                  name:
                    type: "string"
                  type:
                    type: "string"
                  comment:
                    type: "int"
                example:
                  id: "1"
                  role: "usr"
                  pass: "123456password"
                  pass_reset: "1"
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "BAD_REQUEST"
                  message:
                    type: "string"
                    example: "BAD_REQUEST"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "NOT_FOUND"
                  message:
                    type: "string"
                    example: "NOT_FOUND"