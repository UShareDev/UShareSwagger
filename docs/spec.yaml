openapi: 3.0.0
info:
  version: 1.0.0
  title: UShare
paths:
  "/status/{memberId}:":
    get:
      tags:
        - "メンバーステータス情報取得API"
      summary: "メンバーステータス情報取得API"
      description: "指定したIDのユーザのステータス情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      id:
                        type: "int"
                      status:
                        type: "int"
                      guaranteeStatus:
                        type: "int"
                      contractStatus:
                        type: "int"
                example:
                  header:
                    resultCode: 200
                  data:
                    id: 1
                    status: 2
                    guaranteeStatus: 1
                    contractStatus: 1
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null
  "/status":
    post:
      tags:
        - "メンバーステータス情報取得API"
      summary: "メンバーステータス情報登録API"
      requestBody:
        description: "登録したいメンバーのステータス情報"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                menuStatus:
                  type: "int"
                contractStatus:
                  type: "int"
                commissionStatus:
                  type: "int"
                guaranteeStatus:
                  type: "int"
                explanationStatus:
                  type: "int"
                signStatus:
                  type: "int"
                initialPaymentStatus:
                  type: "int"
                onbordingStatus:
                  type: "int"
                contractCompleted:
                  type: "int"
              example:
                id: 1
                menuStatus: 1
                contractStatus: 0
                commissionStatus: 0
                guaranteeStatus: 0
                explanationStatus: 0
                signStatus: 0
                initialPaymentStatus: 0
                onbordingStatus: 0
                contractCompleted: 0
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null
  "/contract/search/{keyword}:":
    get:
      tags:
        - "メンバー契約情報検索API"
      summary: "メンバーステータス情報検索API"
      description: "指定したIDのユーザのステータス情報を取得します。"
      parameters:
        - name: "keyword"
          in: "path"
          description: "取得したいメンバーの検索ワード"
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      memberList:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            fullName:
                              type: string
                example:
                  header:
                    resultCode: 200
                  data:
                    memberList:
                      - { id: 1, fullName: "X" }
                      - { id: 2, fullName: "Y" }
                      - { id: 3, fullName: "Z" }
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null
  "/contract/base/{memberId}:":
    get:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(1/4)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      id:
                        type: "int"
                      fullName:
                        type: "string"
                      gender:
                        type: "int"
                      country:
                        type: "string"
                      birthday:
                        type: "string"
                      postalCode:
                        type: "string"
                      address:
                        type: "string"
                      phoneNumber:
                        type: "string"
                      schoolOrWorkplace:
                        type: "string"
                      workplaceAddress:
                        type: "string"
                      workplaceNumber:
                        type: "string"
                      emergencyFullName:
                        type: "string"
                      emergencyFullNamePron:
                        type: "string"
                      emergencyAddress:
                        type: "string"
                      emergencyRelationship:
                        type: "string"
                      emergencyEmail:
                        type: "string"
                      emergencyPhoneNumber:
                        type: "string"
                      snsType:
                        type: "int"
                      snsId:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    id: 1
                    fullName: "山田 太郎"
                    gender: 0
                    country: "JA"
                    birthday: "2001/01/01"
                    postalCode: "1638001"
                    address: "新宿区西新宿2-8-1"
                    phoneNumber: "03-5321-1111"
                    schoolOrWorkplace: "市役所"
                    workplaceAddress: "横浜市中区日本大通1"
                    workplaceNumber: "045-210-1111"
                    emergencyFullName: "山田 花子"
                    emergencyFullNamePron: "Yamada Hanako"
                    emergencyAddress: "札幌市中央区北3条西6丁目"
                    emergencyRelationship: "母"
                    emergencyEmail: "motherEmail@example.com"
                    emergencyPhoneNumber: "011-231-4111"
                    snsType: 0
                    snsId: "XYZ0123456"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/contract/base":
    post:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報登録API(1/4)"
      requestBody:
        description: "登録したいメンバーの契約情報(1/4)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                fullName:
                  type: "string"
                gender:
                  type: "int"
                country:
                  type: "string"
                birthday:
                  type: "string"
                postalCode:
                  type: "string"
                address:
                  type: "string"
                phoneNumber:
                  type: "string"
                schoolOrWorkplace:
                  type: "string"
                workplaceAddress:
                  type: "string"
                workplaceNumber:
                  type: "string"
                emergencyFullName:
                  type: "string"
                emergencyFullNamePron:
                  type: "string"
                emergencyAddress:
                  type: "string"
                emergencyRelationship:
                  type: "string"
                emergencyEmail:
                  type: "string"
                emergencyPhoneNumber:
                  type: "string"
                snsType:
                  type: "int"
                snsId:
                  type: "string"
              example:
                id: 1
                fullName: "山田 太郎"
                gender: 0
                country: "JA"
                birthday: "2001/01/01"
                postalCode: "1638001"
                address: "新宿区西新宿2-8-1"
                phoneNumber: "03-5321-1111"
                schoolOrWorkplace: "市役所"
                workplaceAddress: "横浜市中区日本大通1"
                workplaceNumber: "045-210-1111"
                emergencyFullName: "山田 花子"
                emergencyFullNamePron: "Yamada Hanako"
                emergencyAddress: "札幌市中央区北3条西6丁目"
                emergencyRelationship: "母"
                emergencyEmail: "motherEmail@example.com"
                emergencyPhoneNumber: "011-231-4111"
                snsType: 0
                snsId: "XYZ0123456"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/contract/date/{memberId}:":
    get:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(2/4)"
      description: "指定したIDのユーザの契約情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      id:
                        type: "int"
                      beginDateContract:
                        type: "string"
                      endDateContract:
                        type: "string"
                      arrivalDate:
                        type: "string"
                      arrivalTime:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    id: "1"
                    beginDateContract: "2023/04/01"
                    endDateContract: "2025/03/31"
                    arrivalTime: "09:30"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/contract/date":
    post:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(2/4)"
      requestBody:
        description: "登録したいメンバーの契約情報(2/4)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                beginDateContract:
                  type: "string"
                endDateContract:
                  type: "string"
                arrivalDate:
                  type: "string"
                arrivalTime:
                  type: "string"
              example:
                id: "1"
                beginDateContract: "2023/04/01"
                endDateContract: "2025/03/31"
                arrivalTime: "09:30"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/contract/image/{memberId}:":
    get:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(3/4)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      id:
                        type: "int"
                      idCardFrontImg:
                        type: string
                        format: byte
                      idCardBackImg:
                        type: string
                        format: byte
                      healthInsCardFrontImg:
                        type: string
                        format: byte
                      healthInsCardBackImg:
                        type: string
                        format: byte
                example:
                  header:
                    resultCode: 200
                  data:
                    id: "1"
                    idCardFrontImg: "(BinaryStringData)"
                    idCardBackImg: "(BinaryStringData)"
                    healthInsCardFrontImg: "(BinaryStringData)"
                    healthInsCardBackImg: "(BinaryStringData)"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/contract/image":
    post:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(3/4)"
      requestBody:
        description: "登録したいメンバーの契約情報(3/4)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                idCardFrontImg:
                  type: string
                  format: byte
                idCardBackImg:
                  type: string
                  format: byte
                healthInsCardFrontImg:
                  type: string
                  format: byte
                healthInsCardBackImg:
                  type: string
                  format: byte
              example:
                id: "1"
                idCardFrontImg: "(BinaryStringData)"
                idCardBackImg: "(BinaryStringData)"
                healthInsCardFrontImg: "(BinaryStringData)"
                healthInsCardBackImg: "(BinaryStringData)"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/contract/questionnaire/{memberId}:":
    get:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(4/4)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      id:
                        type: "int"
                      prefRoomType:
                        type: "int"
                      sensitiveLevelToMessiness:
                        type: "int"
                      sensitiveLevelToNoise:
                        type: "int"
                      sensitiveLevelToTemperature:
                        type: "int"
                      prefDietType:
                        type: "int"
                example:
                  header:
                    resultCode: 200
                  data:
                    id: 1
                    prefRoomType: 2
                    sensitiveLevelToMessiness: 1
                    sensitiveLevelToNoise: 3
                    sensitiveLevelToTemperature: 5
                    prefDietType: 1
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/contract/questionnaire":
    post:
      tags:
        - "メンバー契約情報API"
      summary: "メンバー契約情報取得API(4/4)"
      requestBody:
        description: "登録したいメンバーの契約情報(4/4)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                prefRoomType:
                  type: "int"
                sensitiveLevelToMessiness:
                  type: "int"
                sensitiveLevelToNoise:
                  type: "int"
                sensitiveLevelToTemperature:
                  type: "int"
                prefDietType:
                  type: "int"
              example:
                id: 1
                prefRoomType: 2
                sensitiveLevelToMessiness: 1
                sensitiveLevelToNoise: 3
                sensitiveLevelToTemperature: 5
                prefDietType: 1
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/memberinfo/search/{word}:":
    get:
      tags:
        - "メンバー情報検索API"
      summary: "メンバー情報取得API"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "word"
          in: "path"
          description: "取得したいメンバーの検索ワード"
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      memberList:
                        type: array
                        items:
                          type: memberId
                example:
                  header:
                    resultCode: 200
                  data:
                    memberList:
                      - {
                          id: 1,
                          fullName: "X",
                          university: "X Univ",
                          birthday: "YYYY/MM/DD",
                          major: "X major",
                        }
                      - {
                          id: 2,
                          fullName: "Y",
                          university: "Y Univ",
                          birthday: "YYYY/MM/DD",
                          major: "X major",
                        }
                      - {
                          id: 3,
                          fullName: "Z",
                          university: "Z Univ",
                          birthday: "YYYY/MM/DD",
                          major: "X major",
                        }
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/base/{memberId}:":
    get:
      tags:
        - "メンバー情報取得API"
      summary: "メンバー情報取得API(1/5)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      id:
                        type: "int"
                      fullName:
                        type: "string"
                      birthday:
                        type: "string"
                      university:
                        type: "string"
                      major:
                        type: "string"
                      location:
                        type: "string"
                      homeTown:
                        type: "string"
                      livingPeriodStart:
                        type: "string"
                      livingPeriodEnd:
                        type: "string"
                      link1:
                        type: "string"
                      link2:
                        type: "string"
                      link3:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    id: "1"
                    fullName: "Yamada Taro"
                    birthday: "04/01"
                    university: "Waseda University"
                    major: "Architecture"
                    location: "U Share Nishiwaseda"
                    homeTown: "Osaka"
                    livingPeriodStart: "2023/01/01"
                    livingPeriodEnd: "2024/12/31"
                    link1: "(InstagramURL)"
                    link2: "(FacebookURL)"
                    link3: "(LinkedInURL)"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/base":
    post:
      tags:
        - "メンバー情報取得API"
      summary: "メンバー情報取得API(1/5)"
      requestBody:
        description: "メンバー情報取得API(1/5)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                fullName:
                  type: "string"
                birthday:
                  type: "string"
                university:
                  type: "string"
                major:
                  type: "string"
                location:
                  type: "string"
                homeTown:
                  type: "string"
                livingPeriodStart:
                  type: "string"
                livingPeriodEnd:
                  type: "string"
                link1:
                  type: "string"
                link2:
                  type: "string"
                link3:
                  type: "string"
              example:
                id: "1"
                fullName: "Yamada Taro"
                birthday: "04/01"
                university: "Waseda University"
                major: "Architecture"
                location: "U Share Nishiwaseda"
                homeTown: "Osaka"
                livingPeriodStart: "2023/01/01"
                livingPeriodEnd: "2024/12/31"
                link1: "(InstagramURL)"
                link2: "(FacebookURL)"
                link3: "(LinkedInURL)"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/memberinfo/hobby/{memberId}:":
    get:
      tags:
        - "メンバー情報取得API"
      summary: "メンバー情報取得API(2/5)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      id:
                        type: "int"
                      hobby:
                        type: array
                        items:
                          type: string
                      placesYouLived:
                        type: array
                        items:
                          type: string
                example:
                  header:
                    resultCode: 200
                  data:
                    id: "1"
                    hobby:
                      - tennis
                      - fishing
                      - camp
                    placesYouLived:
                      - NewYork
                      - Pari
                      - Venetia
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/hobby":
    post:
      tags:
        - "メンバー情報取得API"
      summary: "メンバー情報取得API(2/5)"
      requestBody:
        description: "メンバー情報取得API(2/5)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                hobby:
                  type: array
                  items:
                    type: string
                placesYouLived:
                  type: array
                  items:
                    type: string
              example:
                id: "1"
                hobby:
                  - tennis
                  - fishing
                  - camp
                placesYouLived:
                  - NewYork
                  - Pari
                  - Venetia
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/memberinfo/professional/{memberId}:":
    get:
      tags:
        - "メンバー情報取得API"
      summary: "メンバー情報取得API(3/5)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      id:
                        type: "int"
                      companyName:
                        type: "string"
                      employmentType:
                        type: "string"
                      position:
                        type: "string"
                      startDate:
                        type: "string"
                      endDate:
                        type: "string"
                      industry:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    id: "1"
                    companyName: "株式会社XXX"
                    employmentType: "Permanent Employee"
                    position: "CEO"
                    startDate: "2022/01/01"
                    endDate: "2023/12/31"
                    industry: "IT"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/professional":
    post:
      tags:
        - "メンバー情報取得API"
      summary: "メンバー情報取得API(3/5)"
      requestBody:
        description: "メンバー情報取得API(3/5)"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                companyName:
                  type: "string"
                employmentType:
                  type: "string"
                position:
                  type: "string"
                startDate:
                  type: "string"
                endDate:
                  type: "string"
                industry:
                  type: "string"
              example:
                id: "1"
                companyName: "株式会社XXX"
                employmentType: "Permanent Employee"
                position: "CEO"
                startDate: "2022/01/01"
                endDate: "2023/12/31"
                industry: "IT"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/memberinfo/skills/{memberId}:":
    get:
      tags:
        - "メンバー情報取得API"
      summary: "メンバー情報取得API(4/5)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      id:
                        type: "int"
                      role:
                        type: "string"
                      skills:
                        type: array
                        items:
                          type: string
                      wannaConnectWith:
                        type: array
                        items:
                          type: string
                example:
                  header:
                    resultCode: 200
                  data:
                    id: "1"
                    role: "Manager"
                    skills:
                      - technology
                      - economics
                      - finance
                    wannaConnectWith:
                      - interestedin1
                      - interestedin2
                      - interestedin3
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/memberinfo/selfintro/{memberId}:":
    get:
      tags:
        - "メンバー情報取得API"
      summary: "メンバー情報取得API(5/5)"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      id:
                        type: "int"
                      selfIntro:
                        type: "string"
                example:
                  header:
                    resultCode: 200
                  data:
                    id: "1"
                    selfIntro: "selfIntroXXX150char"
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null

  "/member/icon/{memberId}:":
    get:
      operationId: "sample_icon"
      tags:
        - "メンバー情報アイコンAPI"
      summary: "メンバー情報アイコン取得API"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: アイコン画像ファイルをBASE64でダウンロードするエンドポイント
          content:
            application/json:
              schema:
                type: string
                format: byte

  "/member/icon":
    post:
      tags:
        - "メンバー情報アイコンAPI"
      summary: "メンバー情報アイコン登録API"
      requestBody:
        description: "メンバー情報アイコン登録API"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                icon:
                  type: "integer"
                  format: "int64"
              example:
                id: "1"
                icon: "iconBinary"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/member/cv/{memberId}:":
    get:
      operationId: "sample_pdf"
      tags:
        - "メンバー情報PDFAPI"
      summary: "メンバー情報PDF取得API"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: pdfファイルをBASE64でダウンロードするエンドポイント
          content:
            application/json:
              schema:
                type: string
                format: byte

  "/member/cv":
    post:
      tags:
        - "メンバー情報PDFAPI"
      summary: "メンバー情報PDF登録API"
      requestBody:
        description: "メンバー情報PDF登録API"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                cv:
                  type: "integer"
                  format: "int64"
              example:
                id: "1"
                cv: "cvBinary"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/member/movie/{memberId}:":
    get:
      operationId: "sample_movie"
      tags:
        - "メンバー情報動画API"
      summary: "メンバー情報動画取得API"
      description: "指定したIDのユーザのメンバー情報を取得します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: mp4ファイルをBASE64でダウンロードするエンドポイント
          content:
            application/json:
              schema:
                type: string
                format: byte
              example:
                header:
                  resultCode: 200
                data:
                  id: "1"
                  movie: "movieBinary"

  "/member/movie":
    post:
      tags:
        - "メンバー情報動画API"
      summary: "メンバー情報動画登録API"
      requestBody:
        description: "メンバー情報動画登録API"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "int"
                movie:
                  type: "integer"
                  format: "int64"
              example:
                id: "1"
                movie: "movieBinary"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null

  "/login":
    post:
      tags:
        - "ログイン情報取得API"
      summary: "ログイン情報取得API"
      requestBody:
        description: "指定したIDのユーザを検索・パスワードチェックし、ログイン情報を取得します。"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                mail:
                  type: "string"
                password:
                  type: "string"
              example:
                mail: 1@exampole.com
                password: xxxxxxxx
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 201
                  data: null
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 400
                  data: null
  "/user/{memberId}:":
    delete:
      tags:
        - "ユーザ削除API"
      summary: "ユーザ削除API"
      description: "指定したIDのユーザを削除します。"
      parameters:
        - name: "memberId"
          in: "path"
          description: "取得したいメンバーのID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 200
                  data: null
        404:
          desctiption: "NotFound"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  header:
                    resultCode:
                      type: "int"
                    data:
                      type: "object"
                example:
                  header:
                    resultCode: 404
                  data: null
